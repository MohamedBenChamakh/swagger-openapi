/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.utils.openapi.api;

import com.utils.openapi.model.PostRequestBody;
import com.utils.openapi.model.PostResponseBody;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-09-16T17:12:39.115251300+01:00[Africa/Lagos]")
@Validated
@Api(value = "PostClient", description = "the PostClient API")
public interface PostClientApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v1/posts
     *
     * @param postRequestBody  (required)
     * @return post created successfully (status code 201)
     */
    @ApiOperation(value = "", nickname = "createPost", notes = "", response = PostResponseBody.class, tags={ "post-client", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "post created successfully", response = PostResponseBody.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/posts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<PostResponseBody> _createPost(@ApiParam(value = "", required = true) @Valid @RequestBody PostRequestBody postRequestBody) {
        return createPost(postRequestBody);
    }

    // Override this method
    default  ResponseEntity<PostResponseBody> createPost(PostRequestBody postRequestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"createdAt\", \"comments\" : [ { \"createdAt\" : \"createdAt\", \"like\" : true, \"id\" : \"id\", \"content\" : \"content\" }, { \"createdAt\" : \"createdAt\", \"like\" : true, \"id\" : \"id\", \"content\" : \"content\" } ], \"publisher\" : { \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"title\" : \"title\", \"type\" : { \"name\" : \"name\", \"iconUrl\" : \"iconUrl\" }, \"content\" : \"content\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/posts
     *
     * @param page Page of post list (required)
     * @return posts returned successfully (status code 200)
     */
    @ApiOperation(value = "", nickname = "getAllPosts", notes = "", response = PostResponseBody.class, responseContainer = "List", tags={ "post-client", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "posts returned successfully", response = PostResponseBody.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/posts",
        produces = { "application/json" }
    )
    default ResponseEntity<List<PostResponseBody>> _getAllPosts(@NotNull @ApiParam(value = "Page of post list", required = true, defaultValue = "0") @Valid @RequestParam(value = "page", required = true, defaultValue = "0") Integer page) {
        return getAllPosts(page);
    }

    // Override this method
    default  ResponseEntity<List<PostResponseBody>> getAllPosts(Integer page) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"createdAt\", \"comments\" : [ { \"createdAt\" : \"createdAt\", \"like\" : true, \"id\" : \"id\", \"content\" : \"content\" }, { \"createdAt\" : \"createdAt\", \"like\" : true, \"id\" : \"id\", \"content\" : \"content\" } ], \"publisher\" : { \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"title\" : \"title\", \"type\" : { \"name\" : \"name\", \"iconUrl\" : \"iconUrl\" }, \"content\" : \"content\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/posts/{postId}
     *
     * @param postId post id (required)
     * @return post returned successfully (status code 200)
     */
    @ApiOperation(value = "", nickname = "getPostById", notes = "", response = PostResponseBody.class, tags={ "post-client", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "post returned successfully", response = PostResponseBody.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/posts/{postId}",
        produces = { "application/json" }
    )
    default ResponseEntity<PostResponseBody> _getPostById(@ApiParam(value = "post id", required = true) @PathVariable("postId") String postId) {
        return getPostById(postId);
    }

    // Override this method
    default  ResponseEntity<PostResponseBody> getPostById(String postId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"createdAt\", \"comments\" : [ { \"createdAt\" : \"createdAt\", \"like\" : true, \"id\" : \"id\", \"content\" : \"content\" }, { \"createdAt\" : \"createdAt\", \"like\" : true, \"id\" : \"id\", \"content\" : \"content\" } ], \"publisher\" : { \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"title\" : \"title\", \"type\" : { \"name\" : \"name\", \"iconUrl\" : \"iconUrl\" }, \"content\" : \"content\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
